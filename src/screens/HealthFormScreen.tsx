import React, { useState } from 'react';
import {
    ScrollView,
    View,
    Text,
    StyleSheet,
    Alert,
} from 'react-native';
import { InputField, DropdownSelect, Section, Button } from '../components/ui/HealthForm';
import { HealthFormData, initialHealthFormData } from '../types/healthForm';
import {
    PHYSICAL_ACTIVITY_OPTIONS,
    DIET_OPTIONS,
    YES_NO_OPTIONS,
    ALCOHOL_OPTIONS,
    WEIGHT_CHANGES_OPTIONS,
    STRESS_LEVEL_OPTIONS,
    ANA_OPTIONS,
    HEMATURIA_OPTIONS,
} from '../constants/healthFormOptions';
import { colors } from '../theme/colors';
import { spacing, borderRadius } from '../theme/spacing';
import { fontSize, fontFamily } from '../theme/typography';

const HealthFormScreen: React.FC = () => {
    const [formData, setFormData] = useState<HealthFormData>(initialHealthFormData);
    const [errors, setErrors] = useState<Partial<HealthFormData>>({});

    const updateField = (field: keyof HealthFormData, value: string) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        // Clear error when user starts typing
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    };

    const validateForm = (): boolean => {
        const newErrors: Partial<HealthFormData> = {};

        // Validate required fields
        const requiredFields: (keyof HealthFormData)[] = [
            'creatinine',
            'egfr',
            'bun',
            'bloodPressureSystolic',
            'bloodPressureDiastolic',
        ];

        requiredFields.forEach(field => {
            if (!formData[field].trim()) {
                newErrors[field] = 'Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc';
            }
        });

        // Validate numeric fields
        const numericFields = ['creatinine', 'egfr', 'bun', 'serumCalcium', 'c3', 'c4', 'oxalateLevels', 'urinePH', 'bloodPressureSystolic', 'bloodPressureDiastolic', 'waterIntake'];

        numericFields.forEach(field => {
            const value = formData[field as keyof HealthFormData];
            if (value && isNaN(Number(value))) {
                newErrors[field as keyof HealthFormData] = 'Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá';
            }
        });

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = () => {
        if (validateForm()) {
            console.log('Form Data:', formData);
            Alert.alert(
                'Th√†nh c√¥ng',
                'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! Ki·ªÉm tra console ƒë·ªÉ xem chi ti·∫øt.',
                [{ text: 'OK' }]
            );
        } else {
            Alert.alert(
                'L·ªói',
                'Vui l√≤ng ki·ªÉm tra v√† ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.',
                [{ text: 'OK' }]
            );
        }
    };

    return (
        <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
            <View style={styles.header}>
                <Text style={styles.title}>ƒê√°nh Gi√° S·ª©c Kh·ªèe Th·∫≠n</Text>
                <Text style={styles.subtitle}>
                    Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ AI c√≥ th·ªÉ ch·∫©n ƒëo√°n ch√≠nh x√°c
                </Text>
            </View>

            <Section title="X√©t Nghi·ªám M√°u" icon="ü©∏">
                <InputField
                    label="N·ªìng ƒë·ªô Creatinine"
                    value={formData.creatinine}
                    onChangeText={value => updateField('creatinine', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/dL"
                    keyboardType="decimal-pad"
                    required
                    error={errors.creatinine}
                />

                <InputField
                    label="eGFR"
                    value={formData.egfr}
                    onChangeText={value => updateField('egfr', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mL/min/1.73m¬≤"
                    keyboardType="decimal-pad"
                    required
                    error={errors.egfr}
                />

                <InputField
                    label="BUN"
                    value={formData.bun}
                    onChangeText={value => updateField('bun', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/dL"
                    keyboardType="decimal-pad"
                    required
                    error={errors.bun}
                />

                <InputField
                    label="Serum Calcium"
                    value={formData.serumCalcium}
                    onChangeText={value => updateField('serumCalcium', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/dL"
                    keyboardType="decimal-pad"
                    error={errors.serumCalcium}
                />

                <DropdownSelect
                    label="ANA"
                    value={formData.ana}
                    onSelect={value => updateField('ana', value)}
                    options={ANA_OPTIONS}
                    placeholder="Ch·ªçn k·∫øt qu·∫£"
                    error={errors.ana}
                />

                <InputField
                    label="C3"
                    value={formData.c3}
                    onChangeText={value => updateField('c3', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/dL"
                    keyboardType="decimal-pad"
                    error={errors.c3}
                />

                <InputField
                    label="C4"
                    value={formData.c4}
                    onChangeText={value => updateField('c4', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/dL"
                    keyboardType="decimal-pad"
                    error={errors.c4}
                />
            </Section>

            <Section title="X√©t Nghi·ªám N∆∞·ªõc Ti·ªÉu" icon="üî¨">
                <DropdownSelect
                    label="Hematuria"
                    value={formData.hematuria}
                    onSelect={value => updateField('hematuria', value)}
                    options={HEMATURIA_OPTIONS}
                    placeholder="Ch·ªçn m·ª©c ƒë·ªô"
                    error={errors.hematuria}
                />

                <InputField
                    label="Oxalate Levels"
                    value={formData.oxalateLevels}
                    onChangeText={value => updateField('oxalateLevels', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    unit="mg/24h"
                    keyboardType="decimal-pad"
                    error={errors.oxalateLevels}
                />

                <InputField
                    label="Urine pH"
                    value={formData.urinePH}
                    onChangeText={value => updateField('urinePH', value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    keyboardType="decimal-pad"
                    error={errors.urinePH}
                />
            </Section>

            <Section title="Ch·ªâ S·ªë Sinh Hi·ªáu" icon="‚ù§Ô∏è">
                <View style={styles.row}>
                    <View style={styles.halfWidth}>
                        <InputField
                            label="Huy·∫øt √Åp T√¢m Thu"
                            value={formData.bloodPressureSystolic}
                            onChangeText={value => updateField('bloodPressureSystolic', value)}
                            placeholder="120"
                            unit="mmHg"
                            keyboardType="number-pad"
                            required
                            error={errors.bloodPressureSystolic}
                        />
                    </View>
                    <View style={styles.halfWidth}>
                        <InputField
                            label="Huy·∫øt √Åp T√¢m Tr∆∞∆°ng"
                            value={formData.bloodPressureDiastolic}
                            onChangeText={value => updateField('bloodPressureDiastolic', value)}
                            placeholder="80"
                            unit="mmHg"
                            keyboardType="number-pad"
                            required
                            error={errors.bloodPressureDiastolic}
                        />
                    </View>
                </View>

                <InputField
                    label="L∆∞·ª£ng N∆∞·ªõc U·ªëng H√†ng Ng√†y"
                    value={formData.waterIntake}
                    onChangeText={value => updateField('waterIntake', value)}
                    placeholder="Nh·∫≠p s·ªë l√≠t"
                    unit="l√≠t/ng√†y"
                    keyboardType="decimal-pad"
                    error={errors.waterIntake}
                />
            </Section>

            <Section title="Th√≥i Quen S·ªëng" icon="üèÉ">
                <DropdownSelect
                    label="Ho·∫°t ƒê·ªông Th·ªÉ Ch·∫•t"
                    value={formData.physicalActivity}
                    onSelect={value => updateField('physicalActivity', value)}
                    options={PHYSICAL_ACTIVITY_OPTIONS}
                    placeholder="Ch·ªçn t·∫ßn su·∫•t"
                    error={errors.physicalActivity}
                />

                <DropdownSelect
                    label="Ch·∫ø ƒê·ªô ƒÇn"
                    value={formData.diet}
                    onSelect={value => updateField('diet', value)}
                    options={DIET_OPTIONS}
                    placeholder="Ch·ªçn lo·∫°i ch·∫ø ƒë·ªô ƒÉn"
                    error={errors.diet}
                />

                <DropdownSelect
                    label="H√∫t Thu·ªëc"
                    value={formData.smoking}
                    onSelect={value => updateField('smoking', value)}
                    options={YES_NO_OPTIONS}
                    placeholder="Ch·ªçn"
                    error={errors.smoking}
                />

                <DropdownSelect
                    label="S·ª≠ D·ª•ng R∆∞·ª£u Bia"
                    value={formData.alcohol}
                    onSelect={value => updateField('alcohol', value)}
                    options={ALCOHOL_OPTIONS}
                    placeholder="Ch·ªçn t·∫ßn su·∫•t"
                    error={errors.alcohol}
                />

                <DropdownSelect
                    label="S·ª≠ D·ª•ng Thu·ªëc Gi·∫£m ƒêau"
                    value={formData.painkillerUsage}
                    onSelect={value => updateField('painkillerUsage', value)}
                    options={YES_NO_OPTIONS}
                    placeholder="Ch·ªçn"
                    error={errors.painkillerUsage}
                />
            </Section>

            <Section title="Ti·ªÅn S·ª≠ & T√¨nh Tr·∫°ng" icon="üìã">
                <DropdownSelect
                    label="Ti·ªÅn S·ª≠ Gia ƒê√¨nh"
                    value={formData.familyHistory}
                    onSelect={value => updateField('familyHistory', value)}
                    options={YES_NO_OPTIONS}
                    placeholder="C√≥ ti·ªÅn s·ª≠ b·ªánh th·∫≠n trong gia ƒë√¨nh?"
                    error={errors.familyHistory}
                />

                <DropdownSelect
                    label="Thay ƒê·ªïi C√¢n N·∫∑ng"
                    value={formData.weightChanges}
                    onSelect={value => updateField('weightChanges', value)}
                    options={WEIGHT_CHANGES_OPTIONS}
                    placeholder="Ch·ªçn t√¨nh tr·∫°ng"
                    error={errors.weightChanges}
                />

                <DropdownSelect
                    label="M·ª©c ƒê·ªô CƒÉng Th·∫≥ng"
                    value={formData.stressLevel}
                    onSelect={value => updateField('stressLevel', value)}
                    options={STRESS_LEVEL_OPTIONS}
                    placeholder="Ch·ªçn m·ª©c ƒë·ªô"
                    error={errors.stressLevel}
                />
            </Section>

            <View style={styles.buttonContainer}>
                <Button
                    title="G·ª≠i D·ªØ Li·ªáu Ch·∫©n ƒêo√°n"
                    onPress={handleSubmit}
                    size="large"
                    fullWidth
                />
            </View>

            <View style={styles.bottomSpacing} />
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.gray[50],
    },
    header: {
        backgroundColor: colors.primary[500],
        paddingHorizontal: spacing[6],
        paddingTop: spacing[12],
        paddingBottom: spacing[8],
        borderBottomLeftRadius: borderRadius['3xl'],
        borderBottomRightRadius: borderRadius['3xl'],
        marginBottom: spacing[6],
    },
    title: {
        fontSize: fontSize['3xl'],
        fontFamily: fontFamily.montserrat.bold,
        color: colors.white,
        textAlign: 'center',
        marginBottom: spacing[2],
    },
    subtitle: {
        fontSize: fontSize.base,
        fontFamily: fontFamily.montserrat.regular,
        color: colors.primary[100],
        textAlign: 'center',
        lineHeight: 24,
    },
    row: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    halfWidth: {
        flex: 0.48,
    },
    buttonContainer: {
        marginHorizontal: spacing[6],
        marginTop: spacing[6],
    },
    bottomSpacing: {
        height: spacing[8],
    },
});

export default HealthFormScreen;
