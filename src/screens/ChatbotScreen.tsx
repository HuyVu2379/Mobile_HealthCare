import React, { useState, useRef, useEffect } from 'react';
import {
    View,
    StyleSheet,
    Text,
    ImageBackground,
    SafeAreaView,
    StatusBar,
    FlatList,
    KeyboardAvoidingView,
    Platform,
    Keyboard,
    TouchableWithoutFeedback,
} from 'react-native';
import { Suggestions, ChatInput, MessageItem } from '../components';
import { Message, SuggestionItem } from '../types/chat';

const ChatbotScreen = () => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [isTyping, setIsTyping] = useState(false);
    const flatListRef = useRef<FlatList>(null);

    // Danh s√°ch c√¢u tr·∫£ l·ªùi m·∫´u c·ªßa bot
    const botResponses = [
        "C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t c√¢u h·ªèi! T√¥i s·∫Ω gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe n√†y.",
        "ƒê·ªÉ c√≥ l·ªùi khuy√™n ch√≠nh x√°c nh·∫•t, b·∫°n n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa.",
        "Theo nghi√™n c·ª©u y khoa, vi·ªác duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng r·∫•t quan tr·ªçng.",
        "T√¥i khuy√™n b·∫°n n√™n t·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n v√† u·ªëng ƒë·ªß n∆∞·ªõc m·ªói ng√†y.",
        "C√≥ v·∫ª nh∆∞ b·∫°n quan t√¢m ƒë·∫øn s·ª©c kh·ªèe. ƒêi·ªÅu ƒë√≥ th·∫≠t tuy·ªát v·ªùi!",
        "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m chi ti·∫øt ƒë·ªÉ t√¥i h·ªó tr·ª£ b·∫°n t·ªët h∆°n kh√¥ng?",
    ];

    // T·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t - v·ªõi check an to√†n
    const scrollToBottom = () => {
        if (messages.length > 0) {
            setTimeout(() => {
                flatListRef.current?.scrollToEnd({ animated: true });
            }, 100);
        }
    };

    const handleSuggestionPress = (suggestion: SuggestionItem) => {
        sendUserMessage(suggestion.text);
    };

    const sendUserMessage = (text: string) => {
        // T·∫Øt keyboard khi g·ª≠i tin nh·∫Øn
        Keyboard.dismiss();

        const userMessage: Message = {
            id: Date.now().toString(),
            text,
            sender: 'user',
            timestamp: new Date(),
        };

        setMessages(prev => [...prev, userMessage]);
        scrollToBottom();

        // Gi·∫£ l·∫≠p bot typing v√† tr·∫£ l·ªùi sau 1-2 gi√¢y
        setIsTyping(true);
        setTimeout(() => {
            const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
            const botMessage: Message = {
                id: (Date.now() + 1).toString(),
                text: randomResponse,
                sender: 'bot',
                timestamp: new Date(),
            };

            setMessages(prev => [...prev, botMessage]);
            setIsTyping(false);
            scrollToBottom();
        }, Math.random() * 1000 + 1000); // 1-2 gi√¢y
    };

    const handleSendMessage = (message: string) => {
        sendUserMessage(message);
    };

    const dismissKeyboard = () => {
        Keyboard.dismiss();
    };

    const renderMessage = ({ item }: { item: Message }) => (
        <MessageItem message={item} />
    );

    const renderTypingIndicator = () => {
        if (!isTyping) return null;

        return (
            <View style={styles.typingContainer}>
                <View style={styles.avatar}>
                    <Text style={styles.avatarText}>ü§ñ</Text>
                </View>
                <View style={styles.typingBubble}>
                    <Text style={styles.typingText}>ƒêang nh·∫≠p...</Text>
                </View>
            </View>
        );
    };

    const showWelcome = messages.length === 0;

    return (
        <ImageBackground
            source={require('../assets/chatbotbackground.jpg')}
            style={styles.backgroundImage}
            resizeMode="cover"
        >
            <StatusBar barStyle="light-content" backgroundColor="transparent" translucent />
            <KeyboardAvoidingView
                style={styles.keyboardAvoid}
                behavior={Platform.OS === 'ios' ? 'padding' : undefined}
                keyboardVerticalOffset={0}
            >
                <TouchableWithoutFeedback onPress={dismissKeyboard}>
                    <View style={styles.container}>
                        {/* Header - ch·ªâ hi·ªÉn th·ªã khi ch∆∞a c√≥ tin nh·∫Øn */}
                        {showWelcome && (
                            <View style={styles.header}>
                                <Text style={styles.title}>Tr·ª£ l√Ω AI</Text>
                                <Text style={styles.subtitle}>
                                    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω ·∫£o s·ª©c kh·ªèe c·ªßa b·∫°n
                                </Text>
                            </View>
                        )}

                        {/* Danh s√°ch tin nh·∫Øn */}
                        <View style={styles.messagesContainer}>
                            {showWelcome ? (
                                // Hi·ªÉn th·ªã welcome content khi ch∆∞a c√≥ tin nh·∫Øn
                                <View style={styles.welcomeContent}>
                                    {/* Ph·∫ßn n√†y ƒë·ªÉ tr·ªëng ho·∫∑c hi·ªÉn th·ªã n·ªôi dung kh√°c */}
                                </View>
                            ) : (
                                // Hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn
                                <>
                                    <FlatList
                                        ref={flatListRef}
                                        data={messages}
                                        renderItem={renderMessage}
                                        keyExtractor={item => item.id}
                                        style={styles.messagesList}
                                        contentContainerStyle={styles.messagesContent}
                                        showsVerticalScrollIndicator={false}
                                        onScrollBeginDrag={dismissKeyboard}
                                    />
                                    {renderTypingIndicator()}
                                </>
                            )}
                        </View>

                        {/* Ph·∫ßn g·ª£i √Ω - lu√¥n hi·ªÉn th·ªã g·∫ßn input */}
                        <View style={styles.suggestionsSection}>
                            <Suggestions
                                onSuggestionPress={handleSuggestionPress}
                                onScrollBegin={dismissKeyboard}
                            />
                        </View>

                        {/* Thanh nh·∫≠p tin nh·∫Øn */}
                        <View style={styles.inputSection}>
                            <ChatInput
                                onSendMessage={handleSendMessage}
                                placeholder="Nh·∫≠p tin nh·∫Øn..."
                            />
                        </View>
                    </View>
                </TouchableWithoutFeedback>
            </KeyboardAvoidingView>
        </ImageBackground>
    );
};

const styles = StyleSheet.create({
    backgroundImage: {
        flex: 1,
        width: '100%',
        height: '100%',
    },
    keyboardAvoid: {
        flex: 1,
    },
    container: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.3)', // Overlay t·ªëi nh·∫π ƒë·ªÉ text d·ªÖ ƒë·ªçc
    },
    header: {
        alignItems: 'center',
        justifyContent: 'center',
        paddingTop: 60,
        paddingHorizontal: 20,
        marginBottom: 20,
    },
    title: {
        fontSize: 36,
        fontWeight: 'bold',
        color: '#fff',
        textAlign: 'center',
        marginBottom: 12,
        textShadowColor: 'rgba(0, 0, 0, 0.5)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    subtitle: {
        fontSize: 16,
        color: '#fff',
        textAlign: 'center',
        opacity: 0.9,
        lineHeight: 22,
        textShadowColor: 'rgba(0, 0, 0, 0.5)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 2,
    },
    messagesContainer: {
        flex: 1,
    },
    welcomeContent: {
        flex: 1,
        justifyContent: 'flex-start',
        paddingTop: 20,
    },
    messagesList: {
        flex: 1,
    },
    messagesContent: {
        paddingVertical: 8,
    },
    typingContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 8,
    },
    avatar: {
        width: 32,
        height: 32,
        borderRadius: 16,
        backgroundColor: '#f0f0f0',
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 8,
    },
    avatarText: {
        fontSize: 16,
    },
    typingBubble: {
        backgroundColor: '#f0f0f0',
        paddingHorizontal: 16,
        paddingVertical: 12,
        borderRadius: 20,
        borderBottomLeftRadius: 4,
    },
    typingText: {
        color: '#666',
        fontSize: 14,
        fontStyle: 'italic',
    },
    suggestionsSection: {
        paddingVertical: 5,
    },
    inputSection: {
        backgroundColor: 'rgba(255, 255, 255, 0.1)',
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        paddingTop: 8,
    },
});

export default ChatbotScreen;